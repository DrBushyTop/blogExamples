extension 'br:mcr.microsoft.com/bicep/extensions/microsoftgraph/v1.0:0.1.8-preview'

type appInfraInformation = {
  @description('Name of the app service, used in generating redirect URIs')
  backendAppServiceName: string

  @description('URL generated by the frontend Static Web App without the protocol. Example: "rough-plain-02deb2202.5.azurestaticapps.net"')
  frontendSWAAddress: string

  @description('Optional: Custom domain address, if any. Example: "myapp.zure.com"')
  frontendCustomDomain: string?

  @description('The principal ID of the managed identity to assign roles to. Currenlty assigns all roles to given application')
  callingApplicationPrincipalId: string
}

@export()
type appRegConfig = {
  @description('The name of the application registration to create. Must be unique within the tenant.')
  name: string

  @description('The URI of the application registration to create. Must be unique within the tenant and cannnot be changed after creation.')
  identifierUri: string

  @description('Whether to allow the app to use the OAuth 2.0 implicit flow. Enables ID and access token retrieval. Defaults to true.')
  allowAppImplicitFlow: bool?
}

var allowAppImplicitFlow = appRegConf.?allowAppImplicitFlow ?? true

@description('The app registration configuration. See module for permissions as they do not change from environment to environment.')
param appRegConf appRegConfig

@description('The app information for generating redirect URIs')
param appInfraInfo appInfraInformation

var appHomePage = appInfraInfo.?frontendCustomDomain != null
  ? 'https://${appInfraInfo.?frontendCustomDomain}'
  : 'https://${appInfraInfo.frontendSWAAddress}'

var customDomainRedirectUri = appInfraInfo.?frontendCustomDomain != null
  ? ['https://${appInfraInfo.?frontendCustomDomain}/aad-callback']
  : []

var frontendRedirectUris = union(customDomainRedirectUri, [
  'http://localhost:1337/aad-callback'
  'https://${appInfraInfo.frontendSWAAddress}/swagger/oauth2-redirect.html'
])

var swaggerRedirectUris = [
  'http://localhost:10586/swagger/oauth2-redirect.html'
  'https://${appInfraInfo.backendAppServiceName}.azurewebsites.net/swagger/oauth2-redirect.html'
]

var appApplicationPermissions = [
  // Application permissions offered by the API
  // These are used by services to call the API as themselves, without a user
  {
    value: 'Examples.Access.All'
    id: '558bc863-88bd-479a-8731-d5beb4121827'
    displayName: 'Access all examples'
    description: 'Allow the application to access all examples as itself.'
    isEnabled: true
    allowedMemberTypes: [
      'Application'
    ]
  }
]

var appDelegatedPermissions = [
  // Delegated User permissions offered by the API
  {
    value: 'Examples.Access'
    id: '806dcf00-ca4e-4d2d-ac48-20f501b61f84'
    userConsentDisplayName: 'Access to examples'
    userConsentDescription: 'Allow access to examples as you.'
    adminConsentDisplayName: 'Access to examples'
    adminConsentDescription: 'Allow access to access all examples as the user.'
    isEnabled: true
    type: 'User' // Is not admin consent only
  }
]

resource appReg 'Microsoft.Graph/applications@v1.0' = {
  displayName: appRegConf.name
  uniqueName: appRegConf.name
  identifierUris: [
    appRegConf.identifierUri
  ]
  signInAudience: 'AzureADMyOrg'
  web: {
    redirectUris: swaggerRedirectUris
    homePageUrl: appHomePage
    implicitGrantSettings: {
      enableAccessTokenIssuance: allowAppImplicitFlow
      enableIdTokenIssuance: allowAppImplicitFlow
    }
  }
  spa: {
    redirectUris: frontendRedirectUris
  }
  appRoles: appApplicationPermissions
  api: {
    oauth2PermissionScopes: appDelegatedPermissions
  }
  requiredResourceAccess: [
    {
      resourceAppId: '00000003-0000-0000-c000-000000000000'
      resourceAccess: [
        {
          // User.Read
          id: 'e1fe6dd8-ba31-4d61-89e7-88639da4683d'
          type: 'Scope'
        }
      ]
    }
  ]
}

resource appRegSp 'Microsoft.Graph/servicePrincipals@v1.0' = {
  appId: appReg.appId
}

resource appRegRoles 'Microsoft.Graph/appRoleAssignedTo@v1.0' = [
  for (permission, index) in appApplicationPermissions: {
    appRoleId: permission.id
    principalId: appInfraInfo.callingApplicationPrincipalId
    resourceId: appRegSp.id
  }
]

output appRegClientId string = appReg.id
